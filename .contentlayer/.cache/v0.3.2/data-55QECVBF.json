{
  "cacheItemsMap": {
    "blogs/blog-one.mdx": {
      "document": {
        "title": "React and ReduxðŸš€",
        "publishedAt": "January 1, 2023",
        "description": "Learn how to connect react component with Redux store",
        "credit": "Fabio Biondi",
        "cover": "/optimized/articles/blog-one/hero.webp",
        "category": "React",
        "seoDescription": "This is the for React redux.",
        "image": "../images/proj3.jpg",
        "body": {
          "raw": "export const year = 2023\r\n\r\n## Redux to manage state in a React application\r\n\r\nIn {year}, Redux rapresents probably the better state management product in react world.\r\nHow redux works? It is a unidirectional dataflow.\r\nA component dispatch an action to the reducer. \r\nBefore the introduction of Redux toolkit it was more difficult to manage actions.\r\nTo manage action with side effects, as for example api calls, it was necessary to enhance the store with reduxThunk middleware.\r\n\r\nNow with Redux toolkit Query it is easier, it manages syncronous or asyncronous actions without any middleware\r\nIt manages also the status of the async actions: Pending, success, error.<br/>\r\nIt is also easier to generate the actions creator from the reducer\r\n\r\nThe advantage of a state management what is? \r\nA central store allows us to update the state of the components without becoming crazy with props drilling\r\n\r\nWithout a state management the problem is that if the application is complex, an enterprise application has a big tree architecture, to share state between components could be difficult.\r\nA nightmare with props drilling\r\n\r\nWhen the state is trasversal to components, when it is shared in more components Redux comes to rescue us.\r\n\r\n## Enhance redux store\r\n\r\n```bash\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n// Or from '@reduxjs/toolkit/query/react'\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { pokemonApi } from './services/pokemon'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // Add the generated reducer as a specific top-level slice\r\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n  // and other useful features of `rtk-query`.\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(pokemonApi.middleware),\r\n})\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch)\r\n```\r\nBy enhancing the store with the middleware you can track the state of the store during the request, the state of data while the request is pending.\r\n\r\nIt is an unidirectional flow.\r\nA component dispatch an action to the reducer to get data o set a modification\r\nThe reducer executes the function related to the action and updates the state and the store of the app, also with side effects due to async calls.\r\n\r\n```bash\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>, \r\n    document.getElementById('root'));\r\n```\r\n\r\nThe action dispatched can be syncronous or asyncronous, before using Redux toolkit Query to dipatch an asyncronous action it was necessary a middleware to enable side effects.\r\nWith the RTK (aka toolkit query) it is easier because it manages the async call and the state waiting the response of the action that can be:\r\npending/fulfilled/rejected.\r\n\r\n```js\r\n# NPM\r\nnpm install @reduxjs/toolkit\r\n\r\n# Yarn\r\nyarn add @reduxjs/toolkit\r\n```\r\n\r\nAfter the state is updated in the store, all the component that are subscribed to the reducer and modified in the store, are updated.<br/>\r\nChanges of the store are reflected in the components subscribed to the reducer\r\n\r\n## Connect/Subscribe to the store from a functional component\r\n\r\nA component, if it uses the selector, is automatically updated after the reducer update the state? Yes, it is.\r\nA component dispathes an action to reducer.\r\nThe reducer updates the store, with the Rtk query there is no more problem if the action function is syncronous or asyncronous, \r\nit manages the pending/fulfilled/rejected response from the async calls.\r\n\r\nAfter it, the Ui is automatically updated from the selector of the store. The useSelector hook achieves this goal.\r\n\r\nIn the class component, using connect, I get mapsStateToProps that updates the props from store.\r\nIn functional component it is easier with useSelector hook and the component is subscribed to the store.\r\n\r\n```conf\r\n    const isBusy = useSelector((root: RootState) => root.dittaServizio.isBusy);\r\n    const currentItem = useSelector((state: RootState) => state.dittaServizio.currentItem!);\r\n```\r\n\r\n## Dispatch an action\r\n\r\nWith the __dispatch__ statement, the component can dispatch an action to the reducer to execute the reducer function and change the state of the store \r\n(the state is immutable, and it is possibile to change it only by an action dispatched to the reducer)\r\n\r\nDispatching an action is the only way to change the state and in functional components can be done by the hook __useDispatch__ that returns the method\r\n\r\n```conf\r\n    const dispatch = useDispatch<any>();\r\n```\r\n\r\n## Redux documentation\r\n\r\nIn this link you can find the Redux documentation where is well explained the pattern and the way to connect and to manage global state of an app  \r\n[Redux Documentation](https://redux.js.org/introduction/getting-started)\r\n\r\n```js\r\n    # NPM\r\n    npm install redux\r\n\r\n    # Yarn\r\n    yarn add redux\r\n```\r\n\r\n## Flow of Redux\r\n\r\nThe following image shows the unidirectional dataFlow on Redux.\r\n\r\n![Redux flow](/images/Redux.gif)\r\n\r\nThis image has been produced by: Ran Maheshwari<br/>\r\nCredit to:\r\n[Ram Maheshwari](https://www.linkedin.com/in/rammcodes/)\r\n\r\n\r\nDid you like this article? <br />\r\nTell me in a post if you liked it.\r\n",
          "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return n};var y=(n,e,r)=>(r=n!=null?u(f(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>s(a({},\"__esModule\",{value:!0}),n);var d=w((v,c)=>{c.exports=_jsx_runtime});var A={};b(A,{default:()=>j,frontmatter:()=>k,year:()=>l});var t=y(d()),k={title:\"React and Redux\\u{1F680}\",publishedAt:\"January 1, 2023\",description:\"Learn how to connect react component with Redux store\",credit:\"Fabio Biondi\",cover:\"/optimized/articles/blog-one/hero.webp\",seoDescription:\"This is the for React redux.\",category:\"React\",image:\"../images/proj3.jpg\"},l=2023;function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",strong:\"strong\",br:\"br\",a:\"a\",img:\"img\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Redux to manage state in a React application\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",l,`, Redux rapresents probably the better state management product in react world.\\r\nHow redux works? It is a unidirectional dataflow.\\r\nA component dispatch an action to the reducer.\\r\nBefore the introduction of Redux toolkit it was more difficult to manage actions.\\r\nTo manage action with side effects, as for example api calls, it was necessary to enhance the store with reduxThunk middleware.`]}),`\n`,(0,t.jsxs)(e.p,{children:[`Now with Redux toolkit Query it is easier, it manages syncronous or asyncronous actions without any middleware\\r\nIt manages also the status of the async actions: Pending, success, error.`,(0,t.jsx)(\"br\",{}),`\\r\nIt is also easier to generate the actions creator from the reducer`]}),`\n`,(0,t.jsx)(e.p,{children:`The advantage of a state management what is?\\r\nA central store allows us to update the state of the components without becoming crazy with props drilling`}),`\n`,(0,t.jsx)(e.p,{children:`Without a state management the problem is that if the application is complex, an enterprise application has a big tree architecture, to share state between components could be difficult.\\r\nA nightmare with props drilling`}),`\n`,(0,t.jsx)(e.p,{children:\"When the state is trasversal to components, when it is shared in more components Redux comes to rescue us.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Enhance redux store\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`import { configureStore } from '@reduxjs/toolkit'\\r\n// Or from '@reduxjs/toolkit/query/react'\\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\\r\nimport { pokemonApi } from './services/pokemon'\\r\n\\r\nexport const store = configureStore({\\r\n  reducer: {\\r\n    // Add the generated reducer as a specific top-level slice\\r\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\\r\n  },\\r\n  // Adding the api middleware enables caching, invalidation, polling,\\r\n  // and other useful features of \\`rtk-query\\`.\\r\n  middleware: (getDefaultMiddleware) =>\\r\n    getDefaultMiddleware().concat(pokemonApi.middleware),\\r\n})\\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\\r\n// see \\`setupListeners\\` docs - takes an optional callback as the 2nd arg for customization\\r\nsetupListeners(store.dispatch)\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"By enhancing the store with the middleware you can track the state of the store during the request, the state of data while the request is pending.\"}),`\n`,(0,t.jsx)(e.p,{children:`It is an unidirectional flow.\\r\nA component dispatch an action to the reducer to get data o set a modification\\r\nThe reducer executes the function related to the action and updates the state and the store of the app, also with side effects due to async calls.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`    ReactDOM.render(\\r\n        <Provider store={store}>\\r\n            <App />\\r\n        </Provider>, \\r\n    document.getElementById('root'));\n`})}),`\n`,(0,t.jsx)(e.p,{children:`The action dispatched can be syncronous or asyncronous, before using Redux toolkit Query to dipatch an asyncronous action it was necessary a middleware to enable side effects.\\r\nWith the RTK (aka toolkit query) it is easier because it manages the async call and the state waiting the response of the action that can be:\\r\npending/fulfilled/rejected.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`# NPM\\r\nnpm install @reduxjs/toolkit\\r\n\\r\n# Yarn\\r\nyarn add @reduxjs/toolkit\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After the state is updated in the store, all the component that are subscribed to the reducer and modified in the store, are updated.\",(0,t.jsx)(\"br\",{}),`\\r\nChanges of the store are reflected in the components subscribed to the reducer`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Connect/Subscribe to the store from a functional component\"}),`\n`,(0,t.jsx)(e.p,{children:`A component, if it uses the selector, is automatically updated after the reducer update the state? Yes, it is.\\r\nA component dispathes an action to reducer.\\r\nThe reducer updates the store, with the Rtk query there is no more problem if the action function is syncronous or asyncronous,\\r\nit manages the pending/fulfilled/rejected response from the async calls.`}),`\n`,(0,t.jsx)(e.p,{children:\"After it, the Ui is automatically updated from the selector of the store. The useSelector hook achieves this goal.\"}),`\n`,(0,t.jsx)(e.p,{children:`In the class component, using connect, I get mapsStateToProps that updates the props from store.\\r\nIn functional component it is easier with useSelector hook and the component is subscribed to the store.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-conf\",children:`    const isBusy = useSelector((root: RootState) => root.dittaServizio.isBusy);\\r\n    const currentItem = useSelector((state: RootState) => state.dittaServizio.currentItem!);\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Dispatch an action\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With the \",(0,t.jsx)(e.strong,{children:\"dispatch\"}),` statement, the component can dispatch an action to the reducer to execute the reducer function and change the state of the store\\r\n(the state is immutable, and it is possibile to change it only by an action dispatched to the reducer)`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Dispatching an action is the only way to change the state and in functional components can be done by the hook \",(0,t.jsx)(e.strong,{children:\"useDispatch\"}),\" that returns the method\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-conf\",children:`    const dispatch = useDispatch<any>();\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Redux documentation\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this link you can find the Redux documentation where is well explained the pattern and the way to connect and to manage global state of an app\",(0,t.jsx)(e.br,{}),`\n`,(0,t.jsx)(e.a,{href:\"https://redux.js.org/introduction/getting-started\",children:\"Redux Documentation\"})]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`    # NPM\\r\n    npm install redux\\r\n\\r\n    # Yarn\\r\n    yarn add redux\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Flow of Redux\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following image shows the unidirectional dataFlow on Redux.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/images/Redux.gif\",alt:\"Redux flow\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This image has been produced by: Ran Maheshwari\",(0,t.jsx)(\"br\",{}),`\\r\nCredit to:\\r\n`,(0,t.jsx)(e.a,{href:\"https://www.linkedin.com/in/rammcodes/\",children:\"Ram Maheshwari\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you like this article? \",(0,t.jsx)(\"br\",{}),`\\r\nTell me in a post if you liked it.`]})]})}function R(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var j=R;return x(A);})();\n;return Component;"
        },
        "_id": "blogs/blog-one.mdx",
        "_raw": {
          "sourceFilePath": "blogs/blog-one.mdx",
          "sourceFileName": "blog-one.mdx",
          "sourceFileDir": "blogs",
          "contentType": "mdx",
          "flattenedPath": "blogs/blog-one"
        },
        "type": "Blog",
        "readingTime": {
          "text": "4 min read",
          "minutes": 3.885,
          "time": 233100,
          "words": 777
        },
        "slug": "blog-one"
      },
      "documentHash": "1677836966989",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "blogs/blog-three.mdx": {
      "document": {
        "title": "dotnet Blazor",
        "publishedAt": "April 1, 2023",
        "description": "Learn how to create an application in Blazor",
        "cover": "/optimized/articles/blog-three/hero.webp",
        "category": "dotnet",
        "seoDescription": "This is the for React redux.",
        "image": "../images/proj3.jpg",
        "body": {
          "raw": "",
          "code": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var h=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of u(e))!x.call(t,n)&&n!==r&&i(t,n,{get:()=>e[n],enumerable:!(a=d(e,n))||a.enumerable});return t};var j=(t,e,r)=>(r=t!=null?m(g(t)):{},s(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),_=t=>s(i({},\"__esModule\",{value:!0}),t);var p=h((y,c)=>{c.exports=_jsx_runtime});var D={};f(D,{default:()=>z,frontmatter:()=>b});var o=j(p()),b={title:\"dotnet Blazor\",publishedAt:\"April 1, 2023\",description:\"Learn how to create an application in Blazor\",cover:\"/optimized/articles/blog-three/hero.webp\",seoDescription:\"This is the for React redux.\",category:\"dotnet\",image:\"../images/proj3.jpg\"};function l(t){return(0,o.jsx)(o.Fragment,{})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(l,t)})):l(t)}var z=w;return _(D);})();\n;return Component;"
        },
        "_id": "blogs/blog-three.mdx",
        "_raw": {
          "sourceFilePath": "blogs/blog-three.mdx",
          "sourceFileName": "blog-three.mdx",
          "sourceFileDir": "blogs",
          "contentType": "mdx",
          "flattenedPath": "blogs/blog-three"
        },
        "type": "Blog",
        "readingTime": {
          "text": "0 min read",
          "minutes": 0,
          "time": 0,
          "words": 0
        },
        "slug": "blog-three"
      },
      "documentHash": "1680294223776",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "blogs/blog-two.mdx": {
      "document": {
        "title": "Build a portfolio with Next.js",
        "publishedAt": "2023-02-18",
        "description": "A simple guide to build a personal portfolio",
        "cover": "/optimized/articles/blog-one/hero.webp",
        "category": "Next.js",
        "seoDescription": "Article of Next.js",
        "image": "https://images.unsplash.com/photo-1654863075380-5fce8cae1851?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHx0b3BpYy1mZWVkfDMyfGJvOGpRS1RhRTBZfHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60",
        "body": {
          "raw": "\r\n## Next.js - The new framework\r\nNext.js is a framework to create full stack application based on React library developed and mantained by Vercel.\r\nVercel gives the possibility to deploy our Next applications directly on his servers via github in an easy way.\r\n\r\nNext.js supports multiple authentication patterns, each designed for different use cases.\r\nOne of this is easy and it is based on oidc-client, Open Id connect\r\n\r\n## What is a portfolio\r\nA portfolio is a web application that introduces a professionist, presenting the story, the life, the education and the career path taken.<br/> \r\nThe personal portfolio has to follow some basic rules:\r\n\r\n* To Follow modern graphic design \r\n* To Be Responsive to different devices\r\n* To Contain a blog page where the author can publish his articles \r\n* To Give the option to the users to interact to the portfolio, by contancting the author, by publishing posts \r\n\r\n## Developing a portfolio\r\nUsing Next.js to develop a simply web application is easy and quick.\r\nThis framework gives us a quick way to build full stack application and it is easy to manage different kind of rendering in the pages.\r\nUsing node.js it is possible to write full stack all in next architecture creating server calls inside the project. \r\nAlso every api can be written inside the project always via node.js and they can be called from every client page.\r\n\r\n### SSG - Server Static Generation\r\nActually in next it is possbile to determinate if a page has to be statically generated by using getStaticProps, \r\ntogether with getStaticPaths for dynamic pages. So all the the details pages for an argument are build at compile time and the SEO is incredibly optimized.\r\n\r\n```bash\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n    const paths = await getPostsPaths()\r\n    //console.log({paths})\r\n    return {\r\n        //paths: paths.map(x => `/posts/${x.replace('%3A', '_')}`),\r\n        paths: paths.map(x => `/posts/${normalizeEncodedFileName(x)}`),\r\n        fallback: \"blocking\",\r\n    }    \r\n}\r\n\r\nexport const getStaticProps = async ({ params }: { params: { id: string } }) => {\r\n    const idStr: string[] = params.id.split('-');\r\n    const id = idStr[0]\r\n    const aree = await getAreeZeroLevel(null)\r\n    const article = await getPost(parseInt(id))\r\n    const attachments = await getPostAttachments(parseInt(id), true)\r\n    const author = await getAuthor(article?.redactorId) ?? null\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\r\n    //const relatedPosts = []\r\n    return {\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\r\n    }\r\n}\r\n```\r\n\r\nThis feature generates statically all the pages needed by the application at build time.\r\nIn this pattern the SEO is clearely optimized and the google agent can quicly find all the content needed. Also every page has to follow the html semantic rules \r\nto highlight the content to allow the google reader to find the content and optimize SEO. \r\n\r\n### ISR - Incremental static regeneration \r\nIt is important to notice the option revalidate\r\n\r\n```bash\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\r\n    //const relatedPosts = []\r\n    return {\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\r\n        revalidate: 3600\r\n    }\r\n}\r\n```\r\nMagically it gives the possibility to the server to dinamically ri-generate the page and updates so the content every established time.\r\nThe duration is expressed in seconds, 3600 in the example.\r\n\r\n### SSR - Server side rendering\r\nUsing the function: getServerSide() it is possible to generate the page server side, but at request time.\r\n\r\n```bash\r\nexport async function getServerSideProps(context: any) {\r\n    //console.log('I am in server side props loading SSR')\r\n    const data = await fetch(server + `/api/article/${context.query.id}`)\r\n    const result: Article = await data.json();\r\n\r\n    return {\r\n      props: { article: result }\r\n    }\r\n}\r\n```\r\n\r\nWith this pattern the page is generated server side dinamically, completely dinamically.\r\nThe data are fetched at run time when the page is requested.\r\n\r\nIn the same application it is possible to miscellaneus different pattern and use the better related to the user necessity and to the real optimization for the application\r\n\r\n## Blog in portfolio\r\nOne of the most popular feature in a personal portfolio is a blog, actually a collection of pages written by the portfolio's owner related to interesting concepts \r\nthe owner wants to share with guests\r\n\r\nThe common easy pattern used to realize a blog is the mdx format for pages together with ContentLayer that renders the pages in the blog\r\nIt is necessary to add to next the component: \"contentlayer\": \"^0.2.9\"\r\n\r\n```bash\r\nyarn add contentlayer next-contentlayer\r\n\r\n```\r\nAdding in the root directory of the project the contentlayer.config.js with the configuration needed:\r\n\r\n```bash\r\nexport const Blog = defineDocumentType(() => ({\r\n    name: 'Blog',\r\n    filePathPattern: '**/*.mdx',\r\n    bodyType: 'mdx',\r\n    contentType: 'mdx',\r\n    fields: {\r\n        title: { type: 'string', required: true },\r\n        publishedAt: { type: 'string', required: true },\r\n        description: { type: 'string', required: true },\r\n        credit: { type: 'string', required: false },\r\n        cover: { type: 'string', required: true },\r\n        category: { type: 'string', required: true },\r\n        seoDescription: { type: 'string', required: false },\r\n        author: {\r\n            type: 'nested',\r\n            of: Author,\r\n        },\r\n        image: { type: 'string', required: true },  \r\n    },\r\n    computedFields: {\r\n        readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n        slug: {\r\n            type: 'string',\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\r\n            resolve: (doc) => doc._raw.sourceFileName.replace('.mdx', ''),\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md/, \"\"),        \r\n        },\r\n    },\r\n}))\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'data',\r\n    documentTypes: [Blog],\r\n    mdx: {\r\n        remarkPlugins: [],\r\n        rehypePlugins: [],\r\n    },\r\n})\r\n```\r\n\r\nAlso the configuration file: next.config.mjs has to be changed:\r\n\r\n```bash\r\nimport { withContentlayer } from 'next-contentlayer'\r\nconst nextConfig = {\r\n  reactStrictMode: true,\r\n  disableImportAliasWarning: true,\r\n  images:{\r\n    domains: ['images.unsplash.com', 'media-exp1.licdn.com',\"rickandmortyapi.com\"],    \r\n    loader: \"custom\",\r\n    path: \"/\"\r\n  },\r\n  swcMinify: true,\r\n}\r\nexport default withContentlayer(nextConfig)\r\n```\r\n\r\nAfter this configuration we are ready to write our articles in the data directory, \r\nand to rendere the pages creating a list of content (index.tsx) and a generic detail page ([slug].tsx) to render the page called\r\n\r\nThe configuration fopr the index page, the list of articles is:\r\n\r\n```bash\r\n  const handleClick = (slug: string) => (event: React.MouseEvent<HTMLDivElement>) => {\r\n    //console.log(slug)\r\n    router.push('/blogs/' + slug);\r\n  }\r\n\r\n  ...\r\n            <Container>\r\n              <div className='bg-blue-200 text-center mt-4'>      \r\n                <main>\r\n                {blogs.filter(x => x.category === searchValue || searchValue === '').map(\r\n                    ({\r\n                        title,\r\n                        description,\r\n                        slug,\r\n                        category,\r\n                        publishedAt,\r\n                        body,\r\n                        cover,\r\n                        type,\r\n                        _id,\r\n                        _raw,\r\n                        image,\r\n                        readingTime,\r\n                    }: Blog) => (\r\n                      <div key={slug} role=\"button\" onClick={handleClick(slug)}>\r\n                        <BlogCard\r\n                            key={_id}\r\n                            _id={_id}\r\n                            title={title}\r\n                            description={description}\r\n                            publishedAt={publishedAt}\r\n                            cover={cover}\r\n                            slug={slug}\r\n                            body={body}\r\n                            type={type}\r\n                            _raw={_raw}\r\n                            image={image}\r\n                            category={category}\r\n                            //dateTime={publishedAt}\r\n                            readingTime={readingTime.text}                            \r\n                        />\r\n                      </div>\r\n                    )\r\n                )}\r\n                </main>\r\n              </div>\r\n            </Container>\r\n\r\n```\r\n\r\nIt is a normal page, but the opening procedure of the slug page is the way to show the article.\r\nHow it is configured the slug page?\r\n\r\n```bash\r\nexport default function BlogDetail({ blog }: BlogProps) {\r\n    const Component = useMDXComponent(blog.body?.code)\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>{blog.title}</title>\r\n            </Head>\r\n            <div className=\"flex justify-center mx-auto\">\r\n                <article className=\"prose prose-slate lg:prose-xl\">\r\n                    <h1 className=\"text-center mb-3\">{blog.title}</h1>\r\n                    <p className=\"text-slate-500 text-center\">\r\n                        Posted on{' '}\r\n                        <time dateTime={blog.publishedAt} title={new Date(blog.publishedAt).toString()}>\r\n                            {new Date(blog.publishedAt).toLocaleDateString('en-CA')}\r\n                        </time>\r\n                    </p>\r\n                    <h4 className='text-center'>{blog.description}</h4>\r\n                    <div className='grid'>\r\n                        <Component />\r\n                    </div>\r\n                </article>    \r\n            </div>\r\n        </>\r\n      )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    return {\r\n        paths: allBlogs.map((blog: Blog) => ({ params: { slug: blog.slug } })),\r\n        fallback: false,\r\n    }\r\n}\r\n\r\nexport async function getStaticProps({ params }: any) {\r\n    const blog = allBlogs.find((blog: Blog) => blog.slug === params.slug)\r\n    return { props: { blog } }\r\n}\r\n```\r\n\r\nWith contentlayer it is very easy to manage articles and blog with any backoffice needed.\r\n\r\nDid you like this article? <br />\r\nTell me in a post if you liked it.\r\n\r\n\r\n",
          "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!m.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=h(e,i))||o.enumerable});return n};var b=(n,e,r)=>(r=n!=null?p(u(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>s(a({},\"__esModule\",{value:!0}),n);var c=y((N,l)=>{l.exports=_jsx_runtime});var S={};f(S,{default:()=>P,frontmatter:()=>w});var t=b(c()),w={title:\"Build a portfolio with Next.js\",publishedAt:\"2023-02-18\",description:\"A simple guide to build a personal portfolio\",cover:\"/optimized/articles/blog-one/hero.webp\",seoDescription:\"Article of Next.js\",category:\"Next.js\",image:\"https://images.unsplash.com/photo-1654863075380-5fce8cae1851?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHx0b3BpYy1mZWVkfDMyfGJvOGpRS1RhRTBZfHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60\"};function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Next.js - The new framework\"}),`\n`,(0,t.jsx)(e.p,{children:`Next.js is a framework to create full stack application based on React library developed and mantained by Vercel.\\r\nVercel gives the possibility to deploy our Next applications directly on his servers via github in an easy way.`}),`\n`,(0,t.jsx)(e.p,{children:`Next.js supports multiple authentication patterns, each designed for different use cases.\\r\nOne of this is easy and it is based on oidc-client, Open Id connect`}),`\n`,(0,t.jsx)(e.h2,{children:\"What is a portfolio\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A portfolio is a web application that introduces a professionist, presenting the story, the life, the education and the career path taken.\",(0,t.jsx)(\"br\",{}),`\\r\nThe personal portfolio has to follow some basic rules:`]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"To Follow modern graphic design\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Be Responsive to different devices\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Contain a blog page where the author can publish his articles\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Give the option to the users to interact to the portfolio, by contancting the author, by publishing posts\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Developing a portfolio\"}),`\n`,(0,t.jsx)(e.p,{children:`Using Next.js to develop a simply web application is easy and quick.\\r\nThis framework gives us a quick way to build full stack application and it is easy to manage different kind of rendering in the pages.\\r\nUsing node.js it is possible to write full stack all in next architecture creating server calls inside the project.\\r\nAlso every api can be written inside the project always via node.js and they can be called from every client page.`}),`\n`,(0,t.jsx)(e.h3,{children:\"SSG - Server Static Generation\"}),`\n`,(0,t.jsx)(e.p,{children:`Actually in next it is possbile to determinate if a page has to be statically generated by using getStaticProps,\\r\ntogether with getStaticPaths for dynamic pages. So all the the details pages for an argument are build at compile time and the SEO is incredibly optimized.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export const getStaticPaths: GetStaticPaths = async () => {\\r\n    const paths = await getPostsPaths()\\r\n    //console.log({paths})\\r\n    return {\\r\n        //paths: paths.map(x => \\`/posts/\\${x.replace('%3A', '_')}\\`),\\r\n        paths: paths.map(x => \\`/posts/\\${normalizeEncodedFileName(x)}\\`),\\r\n        fallback: \"blocking\",\\r\n    }    \\r\n}\\r\n\\r\nexport const getStaticProps = async ({ params }: { params: { id: string } }) => {\\r\n    const idStr: string[] = params.id.split('-');\\r\n    const id = idStr[0]\\r\n    const aree = await getAreeZeroLevel(null)\\r\n    const article = await getPost(parseInt(id))\\r\n    const attachments = await getPostAttachments(parseInt(id), true)\\r\n    const author = await getAuthor(article?.redactorId) ?? null\\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\\r\n    //const relatedPosts = []\\r\n    return {\\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`This feature generates statically all the pages needed by the application at build time.\\r\nIn this pattern the SEO is clearely optimized and the google agent can quicly find all the content needed. Also every page has to follow the html semantic rules\\r\nto highlight the content to allow the google reader to find the content and optimize SEO.`}),`\n`,(0,t.jsx)(e.h3,{children:\"ISR - Incremental static regeneration\"}),`\n`,(0,t.jsx)(e.p,{children:\"It is important to notice the option revalidate\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`    const relatedPosts = await getRelatedPost(10, parseInt(id))\\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\\r\n    //const relatedPosts = []\\r\n    return {\\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\\r\n        revalidate: 3600\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`Magically it gives the possibility to the server to dinamically ri-generate the page and updates so the content every established time.\\r\nThe duration is expressed in seconds, 3600 in the example.`}),`\n`,(0,t.jsx)(e.h3,{children:\"SSR - Server side rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using the function: getServerSide() it is possible to generate the page server side, but at request time.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export async function getServerSideProps(context: any) {\\r\n    //console.log('I am in server side props loading SSR')\\r\n    const data = await fetch(server + \\`/api/article/\\${context.query.id}\\`)\\r\n    const result: Article = await data.json();\\r\n\\r\n    return {\\r\n      props: { article: result }\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`With this pattern the page is generated server side dinamically, completely dinamically.\\r\nThe data are fetched at run time when the page is requested.`}),`\n`,(0,t.jsx)(e.p,{children:\"In the same application it is possible to miscellaneus different pattern and use the better related to the user necessity and to the real optimization for the application\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Blog in portfolio\"}),`\n`,(0,t.jsx)(e.p,{children:`One of the most popular feature in a personal portfolio is a blog, actually a collection of pages written by the portfolio's owner related to interesting concepts\\r\nthe owner wants to share with guests`}),`\n`,(0,t.jsx)(e.p,{children:`The common easy pattern used to realize a blog is the mdx format for pages together with ContentLayer that renders the pages in the blog\\r\nIt is necessary to add to next the component: \"contentlayer\": \"^0.2.9\"`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`yarn add contentlayer next-contentlayer\\r\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Adding in the root directory of the project the contentlayer.config.js with the configuration needed:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export const Blog = defineDocumentType(() => ({\\r\n    name: 'Blog',\\r\n    filePathPattern: '**/*.mdx',\\r\n    bodyType: 'mdx',\\r\n    contentType: 'mdx',\\r\n    fields: {\\r\n        title: { type: 'string', required: true },\\r\n        publishedAt: { type: 'string', required: true },\\r\n        description: { type: 'string', required: true },\\r\n        credit: { type: 'string', required: false },\\r\n        cover: { type: 'string', required: true },\\r\n        category: { type: 'string', required: true },\\r\n        seoDescription: { type: 'string', required: false },\\r\n        author: {\\r\n            type: 'nested',\\r\n            of: Author,\\r\n        },\\r\n        image: { type: 'string', required: true },  \\r\n    },\\r\n    computedFields: {\\r\n        readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\\r\n        slug: {\\r\n            type: 'string',\\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\\\.mdx$/, ''),\\r\n            resolve: (doc) => doc._raw.sourceFileName.replace('.mdx', ''),\\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\\\.md/, \"\"),        \\r\n        },\\r\n    },\\r\n}))\\r\n\\r\nexport default makeSource({\\r\n    contentDirPath: 'data',\\r\n    documentTypes: [Blog],\\r\n    mdx: {\\r\n        remarkPlugins: [],\\r\n        rehypePlugins: [],\\r\n    },\\r\n})\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Also the configuration file: next.config.mjs has to be changed:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`import { withContentlayer } from 'next-contentlayer'\\r\nconst nextConfig = {\\r\n  reactStrictMode: true,\\r\n  disableImportAliasWarning: true,\\r\n  images:{\\r\n    domains: ['images.unsplash.com', 'media-exp1.licdn.com',\"rickandmortyapi.com\"],    \\r\n    loader: \"custom\",\\r\n    path: \"/\"\\r\n  },\\r\n  swcMinify: true,\\r\n}\\r\nexport default withContentlayer(nextConfig)\n`})}),`\n`,(0,t.jsx)(e.p,{children:`After this configuration we are ready to write our articles in the data directory,\\r\nand to rendere the pages creating a list of content (index.tsx) and a generic detail page ([slug].tsx) to render the page called`}),`\n`,(0,t.jsx)(e.p,{children:\"The configuration fopr the index page, the list of articles is:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`  const handleClick = (slug: string) => (event: React.MouseEvent<HTMLDivElement>) => {\\r\n    //console.log(slug)\\r\n    router.push('/blogs/' + slug);\\r\n  }\\r\n\\r\n  ...\\r\n            <Container>\\r\n              <div className='bg-blue-200 text-center mt-4'>      \\r\n                <main>\\r\n                {blogs.filter(x => x.category === searchValue || searchValue === '').map(\\r\n                    ({\\r\n                        title,\\r\n                        description,\\r\n                        slug,\\r\n                        category,\\r\n                        publishedAt,\\r\n                        body,\\r\n                        cover,\\r\n                        type,\\r\n                        _id,\\r\n                        _raw,\\r\n                        image,\\r\n                        readingTime,\\r\n                    }: Blog) => (\\r\n                      <div key={slug} role=\"button\" onClick={handleClick(slug)}>\\r\n                        <BlogCard\\r\n                            key={_id}\\r\n                            _id={_id}\\r\n                            title={title}\\r\n                            description={description}\\r\n                            publishedAt={publishedAt}\\r\n                            cover={cover}\\r\n                            slug={slug}\\r\n                            body={body}\\r\n                            type={type}\\r\n                            _raw={_raw}\\r\n                            image={image}\\r\n                            category={category}\\r\n                            //dateTime={publishedAt}\\r\n                            readingTime={readingTime.text}                            \\r\n                        />\\r\n                      </div>\\r\n                    )\\r\n                )}\\r\n                </main>\\r\n              </div>\\r\n            </Container>\\r\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:`It is a normal page, but the opening procedure of the slug page is the way to show the article.\\r\nHow it is configured the slug page?`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export default function BlogDetail({ blog }: BlogProps) {\\r\n    const Component = useMDXComponent(blog.body?.code)\\r\n\\r\n    return (\\r\n        <>\\r\n            <Head>\\r\n                <title>{blog.title}</title>\\r\n            </Head>\\r\n            <div className=\"flex justify-center mx-auto\">\\r\n                <article className=\"prose prose-slate lg:prose-xl\">\\r\n                    <h1 className=\"text-center mb-3\">{blog.title}</h1>\\r\n                    <p className=\"text-slate-500 text-center\">\\r\n                        Posted on{' '}\\r\n                        <time dateTime={blog.publishedAt} title={new Date(blog.publishedAt).toString()}>\\r\n                            {new Date(blog.publishedAt).toLocaleDateString('en-CA')}\\r\n                        </time>\\r\n                    </p>\\r\n                    <h4 className='text-center'>{blog.description}</h4>\\r\n                    <div className='grid'>\\r\n                        <Component />\\r\n                    </div>\\r\n                </article>    \\r\n            </div>\\r\n        </>\\r\n      )\\r\n}\\r\n\\r\nexport async function getStaticPaths() {\\r\n    return {\\r\n        paths: allBlogs.map((blog: Blog) => ({ params: { slug: blog.slug } })),\\r\n        fallback: false,\\r\n    }\\r\n}\\r\n\\r\nexport async function getStaticProps({ params }: any) {\\r\n    const blog = allBlogs.find((blog: Blog) => blog.slug === params.slug)\\r\n    return { props: { blog } }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"With contentlayer it is very easy to manage articles and blog with any backoffice needed.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you like this article? \",(0,t.jsx)(\"br\",{}),`\\r\nTell me in a post if you liked it.`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var P=v;return x(S);})();\n;return Component;"
        },
        "_id": "blogs/blog-two.mdx",
        "_raw": {
          "sourceFilePath": "blogs/blog-two.mdx",
          "sourceFileName": "blog-two.mdx",
          "sourceFileDir": "blogs",
          "contentType": "mdx",
          "flattenedPath": "blogs/blog-two"
        },
        "type": "Blog",
        "readingTime": {
          "text": "6 min read",
          "minutes": 5.96,
          "time": 357600,
          "words": 1192
        },
        "slug": "blog-two"
      },
      "documentHash": "1685109172936",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    }
  }
}
