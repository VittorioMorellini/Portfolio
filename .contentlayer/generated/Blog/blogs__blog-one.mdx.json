{
  "title": "React and ReduxðŸš€",
  "publishedAt": "January 1, 2023",
  "description": "Learn how to connect react component with Redux store",
  "credit": "Fabio Biondi",
  "cover": "/optimized/articles/blog-one/hero.webp",
  "category": "React",
  "seoDescription": "This is the for React redux.",
  "image": "../images/proj3.jpg",
  "body": {
    "raw": "export const year = 2023\r\n\r\n## Redux to manage state in a React application\r\n\r\nIn {year}, Redux rapresents probably the better state management product in react world.\r\nHow redux works? It is a unidirectional dataflow.\r\nA component dispatch an action to the reducer. \r\nBefore the introduction of Redux toolkit it was more difficult to manage actions.\r\nTo manage action with side effects, as for example api calls, it was necessary to enhance the store with reduxThunk middleware.\r\n\r\nNow with Redux toolkit Query it is easier, it manages syncronous or asyncronous actions without any middleware\r\nIt manages also the status of the async actions: Pending, success, error.<br/>\r\nIt is also easier to generate the actions creator from the reducer\r\n\r\nThe advantage of a state management what is? \r\nA central store allows us to update the state of the components without becoming crazy with props drilling\r\n\r\nWithout a state management the problem is that if the application is complex, an enterprise application has a big tree architecture, to share state between components could be difficult.\r\nA nightmare with props drilling\r\n\r\nWhen the state is trasversal to components, when it is shared in more components Redux comes to rescue us.\r\n\r\n## Enhance redux store\r\n\r\n```bash\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n// Or from '@reduxjs/toolkit/query/react'\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { pokemonApi } from './services/pokemon'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // Add the generated reducer as a specific top-level slice\r\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n  // and other useful features of `rtk-query`.\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(pokemonApi.middleware),\r\n})\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch)\r\n```\r\nBy enhancing the store with the middleware you can track the state of the store during the request, the state of data while the request is pending.\r\n\r\nIt is an unidirectional flow.\r\nA component dispatch an action to the reducer to get data o set a modification\r\nThe reducer executes the function related to the action and updates the state and the store of the app, also with side effects due to async calls.\r\n\r\n```bash\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>, \r\n    document.getElementById('root'));\r\n```\r\n\r\nThe action dispatched can be syncronous or asyncronous, before using Redux toolkit Query to dipatch an asyncronous action it was necessary a middleware to enable side effects.\r\nWith the RTK (aka toolkit query) it is easier because it manages the async call and the state waiting the response of the action that can be:\r\npending/fulfilled/rejected.\r\n\r\n```js\r\n# NPM\r\nnpm install @reduxjs/toolkit\r\n\r\n# Yarn\r\nyarn add @reduxjs/toolkit\r\n```\r\n\r\nAfter the state is updated in the store, all the component that are subscribed to the reducer and modified in the store, are updated.<br/>\r\nChanges of the store are reflected in the components subscribed to the reducer\r\n\r\n## Connect/Subscribe to the store from a functional component\r\n\r\nA component, if it uses the selector, is automatically updated after the reducer update the state? Yes, it is.\r\nA component dispathes an action to reducer.\r\nThe reducer updates the store, with the Rtk query there is no more problem if the action function is syncronous or asyncronous, \r\nit manages the pending/fulfilled/rejected response from the async calls.\r\n\r\nAfter it, the Ui is automatically updated from the selector of the store. The useSelector hook achieves this goal.\r\n\r\nIn the class component, using connect, I get mapsStateToProps that updates the props from store.\r\nIn functional component it is easier with useSelector hook and the component is subscribed to the store.\r\n\r\n```conf\r\n    const isBusy = useSelector((root: RootState) => root.dittaServizio.isBusy);\r\n    const currentItem = useSelector((state: RootState) => state.dittaServizio.currentItem!);\r\n```\r\n\r\n## Dispatch an action\r\n\r\nWith the __dispatch__ statement, the component can dispatch an action to the reducer to execute the reducer function and change the state of the store \r\n(the state is immutable, and it is possibile to change it only by an action dispatched to the reducer)\r\n\r\nDispatching an action is the only way to change the state and in functional components can be done by the hook __useDispatch__ that returns the method\r\n\r\n```conf\r\n    const dispatch = useDispatch<any>();\r\n```\r\n\r\n## Redux documentation\r\n\r\nIn this link you can find the Redux documentation where is well explained the pattern and the way to connect and to manage global state of an app  \r\n[Redux Documentation](https://redux.js.org/introduction/getting-started)\r\n\r\n```js\r\n    # NPM\r\n    npm install redux\r\n\r\n    # Yarn\r\n    yarn add redux\r\n```\r\n\r\n## Flow of Redux\r\n\r\nThe following image shows the unidirectional dataFlow on Redux.\r\n\r\n![Redux flow](/images/Redux.gif)\r\n\r\nThis image has been produced by: Ran Maheshwari<br/>\r\nCredit to:\r\n[Ram Maheshwari](https://www.linkedin.com/in/rammcodes/)\r\n\r\n\r\nDid you like this article? <br />\r\nTell me in a post if you liked it.\r\n",
    "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return n};var y=(n,e,r)=>(r=n!=null?u(f(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>s(a({},\"__esModule\",{value:!0}),n);var d=w((v,c)=>{c.exports=_jsx_runtime});var A={};b(A,{default:()=>j,frontmatter:()=>k,year:()=>l});var t=y(d()),k={title:\"React and Redux\\u{1F680}\",publishedAt:\"January 1, 2023\",description:\"Learn how to connect react component with Redux store\",credit:\"Fabio Biondi\",cover:\"/optimized/articles/blog-one/hero.webp\",seoDescription:\"This is the for React redux.\",category:\"React\",image:\"../images/proj3.jpg\"},l=2023;function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",strong:\"strong\",br:\"br\",a:\"a\",img:\"img\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Redux to manage state in a React application\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",l,`, Redux rapresents probably the better state management product in react world.\\r\nHow redux works? It is a unidirectional dataflow.\\r\nA component dispatch an action to the reducer.\\r\nBefore the introduction of Redux toolkit it was more difficult to manage actions.\\r\nTo manage action with side effects, as for example api calls, it was necessary to enhance the store with reduxThunk middleware.`]}),`\n`,(0,t.jsxs)(e.p,{children:[`Now with Redux toolkit Query it is easier, it manages syncronous or asyncronous actions without any middleware\\r\nIt manages also the status of the async actions: Pending, success, error.`,(0,t.jsx)(\"br\",{}),`\\r\nIt is also easier to generate the actions creator from the reducer`]}),`\n`,(0,t.jsx)(e.p,{children:`The advantage of a state management what is?\\r\nA central store allows us to update the state of the components without becoming crazy with props drilling`}),`\n`,(0,t.jsx)(e.p,{children:`Without a state management the problem is that if the application is complex, an enterprise application has a big tree architecture, to share state between components could be difficult.\\r\nA nightmare with props drilling`}),`\n`,(0,t.jsx)(e.p,{children:\"When the state is trasversal to components, when it is shared in more components Redux comes to rescue us.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Enhance redux store\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`import { configureStore } from '@reduxjs/toolkit'\\r\n// Or from '@reduxjs/toolkit/query/react'\\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\\r\nimport { pokemonApi } from './services/pokemon'\\r\n\\r\nexport const store = configureStore({\\r\n  reducer: {\\r\n    // Add the generated reducer as a specific top-level slice\\r\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\\r\n  },\\r\n  // Adding the api middleware enables caching, invalidation, polling,\\r\n  // and other useful features of \\`rtk-query\\`.\\r\n  middleware: (getDefaultMiddleware) =>\\r\n    getDefaultMiddleware().concat(pokemonApi.middleware),\\r\n})\\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\\r\n// see \\`setupListeners\\` docs - takes an optional callback as the 2nd arg for customization\\r\nsetupListeners(store.dispatch)\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"By enhancing the store with the middleware you can track the state of the store during the request, the state of data while the request is pending.\"}),`\n`,(0,t.jsx)(e.p,{children:`It is an unidirectional flow.\\r\nA component dispatch an action to the reducer to get data o set a modification\\r\nThe reducer executes the function related to the action and updates the state and the store of the app, also with side effects due to async calls.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`    ReactDOM.render(\\r\n        <Provider store={store}>\\r\n            <App />\\r\n        </Provider>, \\r\n    document.getElementById('root'));\n`})}),`\n`,(0,t.jsx)(e.p,{children:`The action dispatched can be syncronous or asyncronous, before using Redux toolkit Query to dipatch an asyncronous action it was necessary a middleware to enable side effects.\\r\nWith the RTK (aka toolkit query) it is easier because it manages the async call and the state waiting the response of the action that can be:\\r\npending/fulfilled/rejected.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`# NPM\\r\nnpm install @reduxjs/toolkit\\r\n\\r\n# Yarn\\r\nyarn add @reduxjs/toolkit\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After the state is updated in the store, all the component that are subscribed to the reducer and modified in the store, are updated.\",(0,t.jsx)(\"br\",{}),`\\r\nChanges of the store are reflected in the components subscribed to the reducer`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Connect/Subscribe to the store from a functional component\"}),`\n`,(0,t.jsx)(e.p,{children:`A component, if it uses the selector, is automatically updated after the reducer update the state? Yes, it is.\\r\nA component dispathes an action to reducer.\\r\nThe reducer updates the store, with the Rtk query there is no more problem if the action function is syncronous or asyncronous,\\r\nit manages the pending/fulfilled/rejected response from the async calls.`}),`\n`,(0,t.jsx)(e.p,{children:\"After it, the Ui is automatically updated from the selector of the store. The useSelector hook achieves this goal.\"}),`\n`,(0,t.jsx)(e.p,{children:`In the class component, using connect, I get mapsStateToProps that updates the props from store.\\r\nIn functional component it is easier with useSelector hook and the component is subscribed to the store.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-conf\",children:`    const isBusy = useSelector((root: RootState) => root.dittaServizio.isBusy);\\r\n    const currentItem = useSelector((state: RootState) => state.dittaServizio.currentItem!);\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Dispatch an action\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With the \",(0,t.jsx)(e.strong,{children:\"dispatch\"}),` statement, the component can dispatch an action to the reducer to execute the reducer function and change the state of the store\\r\n(the state is immutable, and it is possibile to change it only by an action dispatched to the reducer)`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Dispatching an action is the only way to change the state and in functional components can be done by the hook \",(0,t.jsx)(e.strong,{children:\"useDispatch\"}),\" that returns the method\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-conf\",children:`    const dispatch = useDispatch<any>();\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Redux documentation\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this link you can find the Redux documentation where is well explained the pattern and the way to connect and to manage global state of an app\",(0,t.jsx)(e.br,{}),`\n`,(0,t.jsx)(e.a,{href:\"https://redux.js.org/introduction/getting-started\",children:\"Redux Documentation\"})]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`    # NPM\\r\n    npm install redux\\r\n\\r\n    # Yarn\\r\n    yarn add redux\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Flow of Redux\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following image shows the unidirectional dataFlow on Redux.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/images/Redux.gif\",alt:\"Redux flow\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This image has been produced by: Ran Maheshwari\",(0,t.jsx)(\"br\",{}),`\\r\nCredit to:\\r\n`,(0,t.jsx)(e.a,{href:\"https://www.linkedin.com/in/rammcodes/\",children:\"Ram Maheshwari\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you like this article? \",(0,t.jsx)(\"br\",{}),`\\r\nTell me in a post if you liked it.`]})]})}function R(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var j=R;return x(A);})();\n;return Component;"
  },
  "_id": "blogs/blog-one.mdx",
  "_raw": {
    "sourceFilePath": "blogs/blog-one.mdx",
    "sourceFileName": "blog-one.mdx",
    "sourceFileDir": "blogs",
    "contentType": "mdx",
    "flattenedPath": "blogs/blog-one"
  },
  "type": "Blog",
  "readingTime": {
    "text": "4 min read",
    "minutes": 3.885,
    "time": 233100,
    "words": 777
  },
  "slug": "blog-one"
}