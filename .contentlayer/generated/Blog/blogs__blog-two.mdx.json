{
  "title": "Build a portfolio with Next.js",
  "publishedAt": "2023-02-18",
  "description": "A simple guide to build a personal portfolio",
  "cover": "/optimized/articles/blog-one/hero.webp",
  "category": "Next.js",
  "seoDescription": "Article of Next.js",
  "image": "https://images.unsplash.com/photo-1654863075380-5fce8cae1851?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHx0b3BpYy1mZWVkfDMyfGJvOGpRS1RhRTBZfHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60",
  "body": {
    "raw": "\r\n## Next.js - The new framework\r\nNext.js is a framework to create full stack application based on React library developed and mantained by Vercel.\r\nVercel gives the possibility to deploy our Next applications directly on his servers via github in an easy way.\r\n\r\nNext.js supports multiple authentication patterns, each designed for different use cases.\r\nOne of this is easy and it is based on oidc-client, Open Id connect\r\n\r\n## What is a portfolio\r\nA portfolio is a web application that introduces a professionist, presenting the story, the life, the education and the career path taken.<br/> \r\nThe personal portfolio has to follow some basic rules:\r\n\r\n* To Follow modern graphic design \r\n* To Be Responsive to different devices\r\n* To Contain a blog page where the author can publish his articles \r\n* To Give the option to the users to interact to the portfolio, by contancting the author, by publishing posts \r\n\r\n## Developing a portfolio\r\nUsing Next.js to develop a simply web application is easy and quick.\r\nThis framework gives us a quick way to build full stack application and it is easy to manage different kind of rendering in the pages.\r\nUsing node.js it is possible to write full stack all in next architecture creating server calls inside the project. \r\nAlso every api can be written inside the project always via node.js and they can be called from every client page.\r\n\r\n### SSG - Server Static Generation\r\nActually in next it is possbile to determinate if a page has to be statically generated by using getStaticProps, \r\ntogether with getStaticPaths for dynamic pages. So all the the details pages for an argument are build at compile time and the SEO is incredibly optimized.\r\n\r\n```bash\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n    const paths = await getPostsPaths()\r\n    //console.log({paths})\r\n    return {\r\n        //paths: paths.map(x => `/posts/${x.replace('%3A', '_')}`),\r\n        paths: paths.map(x => `/posts/${normalizeEncodedFileName(x)}`),\r\n        fallback: \"blocking\",\r\n    }    \r\n}\r\n\r\nexport const getStaticProps = async ({ params }: { params: { id: string } }) => {\r\n    const idStr: string[] = params.id.split('-');\r\n    const id = idStr[0]\r\n    const aree = await getAreeZeroLevel(null)\r\n    const article = await getPost(parseInt(id))\r\n    const attachments = await getPostAttachments(parseInt(id), true)\r\n    const author = await getAuthor(article?.redactorId) ?? null\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\r\n    //const relatedPosts = []\r\n    return {\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\r\n    }\r\n}\r\n```\r\n\r\nThis feature generates statically all the pages needed by the application at build time.\r\nIn this pattern the SEO is clearely optimized and the google agent can quicly find all the content needed. Also every page has to follow the html semantic rules \r\nto highlight the content to allow the google reader to find the content and optimize SEO. \r\n\r\n### ISR - Incremental static regeneration \r\nIt is important to notice the option revalidate\r\n\r\n```bash\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\r\n    //const relatedPosts = []\r\n    return {\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\r\n        revalidate: 3600\r\n    }\r\n}\r\n```\r\nMagically it gives the possibility to the server to dinamically ri-generate the page and updates so the content every established time.\r\nThe duration is expressed in seconds, 3600 in the example.\r\n\r\n### SSR - Server side rendering\r\nUsing the function: getServerSide() it is possible to generate the page server side, but at request time.\r\n\r\n```bash\r\nexport async function getServerSideProps(context: any) {\r\n    //console.log('I am in server side props loading SSR')\r\n    const data = await fetch(server + `/api/article/${context.query.id}`)\r\n    const result: Article = await data.json();\r\n\r\n    return {\r\n      props: { article: result }\r\n    }\r\n}\r\n```\r\n\r\nWith this pattern the page is generated server side dinamically, completely dinamically.\r\nThe data are fetched at run time when the page is requested.\r\n\r\nIn the same application it is possible to miscellaneus different pattern and use the better related to the user necessity and to the real optimization for the application\r\n\r\n## Blog in portfolio\r\nOne of the most popular feature in a personal portfolio is a blog, actually a collection of pages written by the portfolio's owner related to interesting concepts \r\nthe owner wants to share with guests\r\n\r\nThe common easy pattern used to realize a blog is the mdx format for pages together with ContentLayer that renders the pages in the blog\r\nIt is necessary to add to next the component: \"contentlayer\": \"^0.2.9\"\r\n\r\n```bash\r\nyarn add contentlayer next-contentlayer\r\n\r\n```\r\nAdding in the root directory of the project the contentlayer.config.js with the configuration needed:\r\n\r\n```bash\r\nexport const Blog = defineDocumentType(() => ({\r\n    name: 'Blog',\r\n    filePathPattern: '**/*.mdx',\r\n    bodyType: 'mdx',\r\n    contentType: 'mdx',\r\n    fields: {\r\n        title: { type: 'string', required: true },\r\n        publishedAt: { type: 'string', required: true },\r\n        description: { type: 'string', required: true },\r\n        credit: { type: 'string', required: false },\r\n        cover: { type: 'string', required: true },\r\n        category: { type: 'string', required: true },\r\n        seoDescription: { type: 'string', required: false },\r\n        author: {\r\n            type: 'nested',\r\n            of: Author,\r\n        },\r\n        image: { type: 'string', required: true },  \r\n    },\r\n    computedFields: {\r\n        readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n        slug: {\r\n            type: 'string',\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\r\n            resolve: (doc) => doc._raw.sourceFileName.replace('.mdx', ''),\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md/, \"\"),        \r\n        },\r\n    },\r\n}))\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'data',\r\n    documentTypes: [Blog],\r\n    mdx: {\r\n        remarkPlugins: [],\r\n        rehypePlugins: [],\r\n    },\r\n})\r\n```\r\n\r\nAlso the configuration file: next.config.mjs has to be changed:\r\n\r\n```bash\r\nimport { withContentlayer } from 'next-contentlayer'\r\nconst nextConfig = {\r\n  reactStrictMode: true,\r\n  disableImportAliasWarning: true,\r\n  images:{\r\n    domains: ['images.unsplash.com', 'media-exp1.licdn.com',\"rickandmortyapi.com\"],    \r\n    loader: \"custom\",\r\n    path: \"/\"\r\n  },\r\n  swcMinify: true,\r\n}\r\nexport default withContentlayer(nextConfig)\r\n```\r\n\r\nAfter this configuration we are ready to write our articles in the data directory, \r\nand to rendere the pages creating a list of content (index.tsx) and a generic detail page ([slug].tsx) to render the page called\r\n\r\nThe configuration fopr the index page, the list of articles is:\r\n\r\n```bash\r\n  const handleClick = (slug: string) => (event: React.MouseEvent<HTMLDivElement>) => {\r\n    //console.log(slug)\r\n    router.push('/blogs/' + slug);\r\n  }\r\n\r\n  ...\r\n            <Container>\r\n              <div className='bg-blue-200 text-center mt-4'>      \r\n                <main>\r\n                {blogs.filter(x => x.category === searchValue || searchValue === '').map(\r\n                    ({\r\n                        title,\r\n                        description,\r\n                        slug,\r\n                        category,\r\n                        publishedAt,\r\n                        body,\r\n                        cover,\r\n                        type,\r\n                        _id,\r\n                        _raw,\r\n                        image,\r\n                        readingTime,\r\n                    }: Blog) => (\r\n                      <div key={slug} role=\"button\" onClick={handleClick(slug)}>\r\n                        <BlogCard\r\n                            key={_id}\r\n                            _id={_id}\r\n                            title={title}\r\n                            description={description}\r\n                            publishedAt={publishedAt}\r\n                            cover={cover}\r\n                            slug={slug}\r\n                            body={body}\r\n                            type={type}\r\n                            _raw={_raw}\r\n                            image={image}\r\n                            category={category}\r\n                            //dateTime={publishedAt}\r\n                            readingTime={readingTime.text}                            \r\n                        />\r\n                      </div>\r\n                    )\r\n                )}\r\n                </main>\r\n              </div>\r\n            </Container>\r\n\r\n```\r\n\r\nIt is a normal page, but the opening procedure of the slug page is the way to show the article.\r\nHow it is configured the slug page?\r\n\r\n```bash\r\nexport default function BlogDetail({ blog }: BlogProps) {\r\n    const Component = useMDXComponent(blog.body?.code)\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>{blog.title}</title>\r\n            </Head>\r\n            <div className=\"flex justify-center mx-auto\">\r\n                <article className=\"prose prose-slate lg:prose-xl\">\r\n                    <h1 className=\"text-center mb-3\">{blog.title}</h1>\r\n                    <p className=\"text-slate-500 text-center\">\r\n                        Posted on{' '}\r\n                        <time dateTime={blog.publishedAt} title={new Date(blog.publishedAt).toString()}>\r\n                            {new Date(blog.publishedAt).toLocaleDateString('en-CA')}\r\n                        </time>\r\n                    </p>\r\n                    <h4 className='text-center'>{blog.description}</h4>\r\n                    <div className='grid'>\r\n                        <Component />\r\n                    </div>\r\n                </article>    \r\n            </div>\r\n        </>\r\n      )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    return {\r\n        paths: allBlogs.map((blog: Blog) => ({ params: { slug: blog.slug } })),\r\n        fallback: false,\r\n    }\r\n}\r\n\r\nexport async function getStaticProps({ params }: any) {\r\n    const blog = allBlogs.find((blog: Blog) => blog.slug === params.slug)\r\n    return { props: { blog } }\r\n}\r\n```\r\n\r\nWith contentlayer it is very easy to manage articles and blog with any backoffice needed.\r\n\r\nDid you like this article? <br />\r\nTell me in a post if you liked it.\r\n\r\n\r\n",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!m.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=h(e,i))||o.enumerable});return n};var b=(n,e,r)=>(r=n!=null?p(u(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>s(a({},\"__esModule\",{value:!0}),n);var c=y((N,l)=>{l.exports=_jsx_runtime});var S={};f(S,{default:()=>P,frontmatter:()=>w});var t=b(c()),w={title:\"Build a portfolio with Next.js\",publishedAt:\"2023-02-18\",description:\"A simple guide to build a personal portfolio\",cover:\"/optimized/articles/blog-one/hero.webp\",seoDescription:\"Article of Next.js\",category:\"Next.js\",image:\"https://images.unsplash.com/photo-1654863075380-5fce8cae1851?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHx0b3BpYy1mZWVkfDMyfGJvOGpRS1RhRTBZfHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60\"};function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Next.js - The new framework\"}),`\n`,(0,t.jsx)(e.p,{children:`Next.js is a framework to create full stack application based on React library developed and mantained by Vercel.\\r\nVercel gives the possibility to deploy our Next applications directly on his servers via github in an easy way.`}),`\n`,(0,t.jsx)(e.p,{children:`Next.js supports multiple authentication patterns, each designed for different use cases.\\r\nOne of this is easy and it is based on oidc-client, Open Id connect`}),`\n`,(0,t.jsx)(e.h2,{children:\"What is a portfolio\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A portfolio is a web application that introduces a professionist, presenting the story, the life, the education and the career path taken.\",(0,t.jsx)(\"br\",{}),`\\r\nThe personal portfolio has to follow some basic rules:`]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"To Follow modern graphic design\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Be Responsive to different devices\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Contain a blog page where the author can publish his articles\"}),`\n`,(0,t.jsx)(e.li,{children:\"To Give the option to the users to interact to the portfolio, by contancting the author, by publishing posts\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Developing a portfolio\"}),`\n`,(0,t.jsx)(e.p,{children:`Using Next.js to develop a simply web application is easy and quick.\\r\nThis framework gives us a quick way to build full stack application and it is easy to manage different kind of rendering in the pages.\\r\nUsing node.js it is possible to write full stack all in next architecture creating server calls inside the project.\\r\nAlso every api can be written inside the project always via node.js and they can be called from every client page.`}),`\n`,(0,t.jsx)(e.h3,{children:\"SSG - Server Static Generation\"}),`\n`,(0,t.jsx)(e.p,{children:`Actually in next it is possbile to determinate if a page has to be statically generated by using getStaticProps,\\r\ntogether with getStaticPaths for dynamic pages. So all the the details pages for an argument are build at compile time and the SEO is incredibly optimized.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export const getStaticPaths: GetStaticPaths = async () => {\\r\n    const paths = await getPostsPaths()\\r\n    //console.log({paths})\\r\n    return {\\r\n        //paths: paths.map(x => \\`/posts/\\${x.replace('%3A', '_')}\\`),\\r\n        paths: paths.map(x => \\`/posts/\\${normalizeEncodedFileName(x)}\\`),\\r\n        fallback: \"blocking\",\\r\n    }    \\r\n}\\r\n\\r\nexport const getStaticProps = async ({ params }: { params: { id: string } }) => {\\r\n    const idStr: string[] = params.id.split('-');\\r\n    const id = idStr[0]\\r\n    const aree = await getAreeZeroLevel(null)\\r\n    const article = await getPost(parseInt(id))\\r\n    const attachments = await getPostAttachments(parseInt(id), true)\\r\n    const author = await getAuthor(article?.redactorId) ?? null\\r\n    const relatedPosts = await getRelatedPost(10, parseInt(id))\\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\\r\n    //const relatedPosts = []\\r\n    return {\\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`This feature generates statically all the pages needed by the application at build time.\\r\nIn this pattern the SEO is clearely optimized and the google agent can quicly find all the content needed. Also every page has to follow the html semantic rules\\r\nto highlight the content to allow the google reader to find the content and optimize SEO.`}),`\n`,(0,t.jsx)(e.h3,{children:\"ISR - Incremental static regeneration\"}),`\n`,(0,t.jsx)(e.p,{children:\"It is important to notice the option revalidate\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`    const relatedPosts = await getRelatedPost(10, parseInt(id))\\r\n    const historyPosts = await getHistoryPost(10, parseInt(id))\\r\n    //const relatedPosts = []\\r\n    return {\\r\n        props: { article, attachments, author, aree, relatedPosts, historyPosts },\\r\n        revalidate: 3600\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`Magically it gives the possibility to the server to dinamically ri-generate the page and updates so the content every established time.\\r\nThe duration is expressed in seconds, 3600 in the example.`}),`\n`,(0,t.jsx)(e.h3,{children:\"SSR - Server side rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using the function: getServerSide() it is possible to generate the page server side, but at request time.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export async function getServerSideProps(context: any) {\\r\n    //console.log('I am in server side props loading SSR')\\r\n    const data = await fetch(server + \\`/api/article/\\${context.query.id}\\`)\\r\n    const result: Article = await data.json();\\r\n\\r\n    return {\\r\n      props: { article: result }\\r\n    }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`With this pattern the page is generated server side dinamically, completely dinamically.\\r\nThe data are fetched at run time when the page is requested.`}),`\n`,(0,t.jsx)(e.p,{children:\"In the same application it is possible to miscellaneus different pattern and use the better related to the user necessity and to the real optimization for the application\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Blog in portfolio\"}),`\n`,(0,t.jsx)(e.p,{children:`One of the most popular feature in a personal portfolio is a blog, actually a collection of pages written by the portfolio's owner related to interesting concepts\\r\nthe owner wants to share with guests`}),`\n`,(0,t.jsx)(e.p,{children:`The common easy pattern used to realize a blog is the mdx format for pages together with ContentLayer that renders the pages in the blog\\r\nIt is necessary to add to next the component: \"contentlayer\": \"^0.2.9\"`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`yarn add contentlayer next-contentlayer\\r\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Adding in the root directory of the project the contentlayer.config.js with the configuration needed:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export const Blog = defineDocumentType(() => ({\\r\n    name: 'Blog',\\r\n    filePathPattern: '**/*.mdx',\\r\n    bodyType: 'mdx',\\r\n    contentType: 'mdx',\\r\n    fields: {\\r\n        title: { type: 'string', required: true },\\r\n        publishedAt: { type: 'string', required: true },\\r\n        description: { type: 'string', required: true },\\r\n        credit: { type: 'string', required: false },\\r\n        cover: { type: 'string', required: true },\\r\n        category: { type: 'string', required: true },\\r\n        seoDescription: { type: 'string', required: false },\\r\n        author: {\\r\n            type: 'nested',\\r\n            of: Author,\\r\n        },\\r\n        image: { type: 'string', required: true },  \\r\n    },\\r\n    computedFields: {\\r\n        readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\\r\n        slug: {\\r\n            type: 'string',\\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\\\.mdx$/, ''),\\r\n            resolve: (doc) => doc._raw.sourceFileName.replace('.mdx', ''),\\r\n            //resolve: (doc) => doc._raw.sourceFileName.replace(/\\\\.md/, \"\"),        \\r\n        },\\r\n    },\\r\n}))\\r\n\\r\nexport default makeSource({\\r\n    contentDirPath: 'data',\\r\n    documentTypes: [Blog],\\r\n    mdx: {\\r\n        remarkPlugins: [],\\r\n        rehypePlugins: [],\\r\n    },\\r\n})\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Also the configuration file: next.config.mjs has to be changed:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`import { withContentlayer } from 'next-contentlayer'\\r\nconst nextConfig = {\\r\n  reactStrictMode: true,\\r\n  disableImportAliasWarning: true,\\r\n  images:{\\r\n    domains: ['images.unsplash.com', 'media-exp1.licdn.com',\"rickandmortyapi.com\"],    \\r\n    loader: \"custom\",\\r\n    path: \"/\"\\r\n  },\\r\n  swcMinify: true,\\r\n}\\r\nexport default withContentlayer(nextConfig)\n`})}),`\n`,(0,t.jsx)(e.p,{children:`After this configuration we are ready to write our articles in the data directory,\\r\nand to rendere the pages creating a list of content (index.tsx) and a generic detail page ([slug].tsx) to render the page called`}),`\n`,(0,t.jsx)(e.p,{children:\"The configuration fopr the index page, the list of articles is:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`  const handleClick = (slug: string) => (event: React.MouseEvent<HTMLDivElement>) => {\\r\n    //console.log(slug)\\r\n    router.push('/blogs/' + slug);\\r\n  }\\r\n\\r\n  ...\\r\n            <Container>\\r\n              <div className='bg-blue-200 text-center mt-4'>      \\r\n                <main>\\r\n                {blogs.filter(x => x.category === searchValue || searchValue === '').map(\\r\n                    ({\\r\n                        title,\\r\n                        description,\\r\n                        slug,\\r\n                        category,\\r\n                        publishedAt,\\r\n                        body,\\r\n                        cover,\\r\n                        type,\\r\n                        _id,\\r\n                        _raw,\\r\n                        image,\\r\n                        readingTime,\\r\n                    }: Blog) => (\\r\n                      <div key={slug} role=\"button\" onClick={handleClick(slug)}>\\r\n                        <BlogCard\\r\n                            key={_id}\\r\n                            _id={_id}\\r\n                            title={title}\\r\n                            description={description}\\r\n                            publishedAt={publishedAt}\\r\n                            cover={cover}\\r\n                            slug={slug}\\r\n                            body={body}\\r\n                            type={type}\\r\n                            _raw={_raw}\\r\n                            image={image}\\r\n                            category={category}\\r\n                            //dateTime={publishedAt}\\r\n                            readingTime={readingTime.text}                            \\r\n                        />\\r\n                      </div>\\r\n                    )\\r\n                )}\\r\n                </main>\\r\n              </div>\\r\n            </Container>\\r\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:`It is a normal page, but the opening procedure of the slug page is the way to show the article.\\r\nHow it is configured the slug page?`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`export default function BlogDetail({ blog }: BlogProps) {\\r\n    const Component = useMDXComponent(blog.body?.code)\\r\n\\r\n    return (\\r\n        <>\\r\n            <Head>\\r\n                <title>{blog.title}</title>\\r\n            </Head>\\r\n            <div className=\"flex justify-center mx-auto\">\\r\n                <article className=\"prose prose-slate lg:prose-xl\">\\r\n                    <h1 className=\"text-center mb-3\">{blog.title}</h1>\\r\n                    <p className=\"text-slate-500 text-center\">\\r\n                        Posted on{' '}\\r\n                        <time dateTime={blog.publishedAt} title={new Date(blog.publishedAt).toString()}>\\r\n                            {new Date(blog.publishedAt).toLocaleDateString('en-CA')}\\r\n                        </time>\\r\n                    </p>\\r\n                    <h4 className='text-center'>{blog.description}</h4>\\r\n                    <div className='grid'>\\r\n                        <Component />\\r\n                    </div>\\r\n                </article>    \\r\n            </div>\\r\n        </>\\r\n      )\\r\n}\\r\n\\r\nexport async function getStaticPaths() {\\r\n    return {\\r\n        paths: allBlogs.map((blog: Blog) => ({ params: { slug: blog.slug } })),\\r\n        fallback: false,\\r\n    }\\r\n}\\r\n\\r\nexport async function getStaticProps({ params }: any) {\\r\n    const blog = allBlogs.find((blog: Blog) => blog.slug === params.slug)\\r\n    return { props: { blog } }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"With contentlayer it is very easy to manage articles and blog with any backoffice needed.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you like this article? \",(0,t.jsx)(\"br\",{}),`\\r\nTell me in a post if you liked it.`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var P=v;return x(S);})();\n;return Component;"
  },
  "_id": "blogs/blog-two.mdx",
  "_raw": {
    "sourceFilePath": "blogs/blog-two.mdx",
    "sourceFileName": "blog-two.mdx",
    "sourceFileDir": "blogs",
    "contentType": "mdx",
    "flattenedPath": "blogs/blog-two"
  },
  "type": "Blog",
  "readingTime": {
    "text": "6 min read",
    "minutes": 5.96,
    "time": 357600,
    "words": 1192
  },
  "slug": "blog-two"
}